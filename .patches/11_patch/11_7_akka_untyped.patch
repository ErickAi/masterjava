Index: web/webapp/src/main/java/ru/javaops/masterjava/webapp/akka/AkkaUntypedSendServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/webapp/src/main/java/ru/javaops/masterjava/webapp/akka/AkkaUntypedSendServlet.java	(date 1514249664818)
+++ web/webapp/src/main/java/ru/javaops/masterjava/webapp/akka/AkkaUntypedSendServlet.java	(date 1514249664818)
@@ -0,0 +1,55 @@
+package ru.javaops.masterjava.webapp.akka;
+
+import akka.actor.AbstractActor;
+import akka.actor.ActorRef;
+import lombok.extern.slf4j.Slf4j;
+import ru.javaops.masterjava.service.mail.GroupResult;
+import ru.javaops.masterjava.service.mail.util.MailUtils.MailObject;
+
+import javax.servlet.ServletConfig;
+import javax.servlet.ServletException;
+import javax.servlet.annotation.MultipartConfig;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+import static ru.javaops.masterjava.webapp.WebUtil.createMailObject;
+import static ru.javaops.masterjava.webapp.WebUtil.doAndWriteResponse;
+import static ru.javaops.masterjava.webapp.akka.AkkaWebappListener.akkaActivator;
+
+@WebServlet(value = "/sendAkkaUntyped", loadOnStartup = 1)
+@Slf4j
+@MultipartConfig
+public class AkkaUntypedSendServlet extends HttpServlet {
+    private ActorRef webappActor;
+    private ActorRef mailActor;
+
+    @Override
+    public void init(ServletConfig config) throws ServletException {
+        super.init(config);
+        webappActor = akkaActivator.startActor(WebappActor.class, "mail-client");
+        mailActor = akkaActivator.getActorRef("akka.tcp://MailService@127.0.0.1:2553/user/mail-actor");
+    }
+
+    @Override
+    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
+        req.setCharacterEncoding("UTF-8");
+        doAndWriteResponse(resp, () -> sendAkka(createMailObject(req)));
+    }
+
+    private String sendAkka(MailObject mailObject) {
+        mailActor.tell(mailObject, webappActor);
+        return "Successfully sent AKKA message";
+    }
+
+    public static class WebappActor extends AbstractActor {
+        @Override
+        public Receive createReceive() {
+            return receiveBuilder().match(GroupResult.class,
+                    groupResult -> log.info(groupResult.toString()))
+                    .build();
+        }
+    }
+}
\ No newline at end of file
Index: services/akka-remote/src/main/java/ru/javaops/masterjava/akka/AkkaActivator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/akka-remote/src/main/java/ru/javaops/masterjava/akka/AkkaActivator.java	(date 1514248684000)
+++ services/akka-remote/src/main/java/ru/javaops/masterjava/akka/AkkaActivator.java	(date 1514248710835)
@@ -1,8 +1,6 @@
 package ru.javaops.masterjava.akka;
 
-import akka.actor.ActorSystem;
-import akka.actor.TypedActor;
-import akka.actor.TypedProps;
+import akka.actor.*;
 import akka.japi.Creator;
 import akka.util.Timeout;
 import lombok.extern.slf4j.Slf4j;
@@ -33,11 +31,21 @@
                 new TypedProps<T>(typedClass, creator).withTimeout(new Timeout(Duration.create(20, TimeUnit.SECONDS))), name);
     }
 
+    public <T> ActorRef startActor(Class<T> actorClass, String name) {
+        log.info("Start AKKA actor: {}", name);
+        return system.actorOf(Props.create(actorClass), name);
+    }
+
     public <T> T getTypedRef(Class<T> typedClass, String path) {
         log.info("Get typed reference with path={}", path);
         return TypedActor.get(system).typedActorOf(new TypedProps<T>(typedClass), system.actorFor(path));
     }
 
+    public ActorRef getActorRef(String path) {
+        log.info("Get actor reference with path={}", path);
+        return system.actorFor(path);
+    }
+
     public ExecutionContext getExecutionContext() {
         return system.dispatcher();
     }
Index: services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/listeners/AkkaMailListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/listeners/AkkaMailListener.java	(date 1514248684000)
+++ services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/listeners/AkkaMailListener.java	(date 1514248710957)
@@ -1,10 +1,13 @@
 package ru.javaops.masterjava.service.mail.listeners;
 
+import akka.actor.AbstractActor;
 import akka.japi.Creator;
 import lombok.extern.slf4j.Slf4j;
 import ru.javaops.masterjava.akka.AkkaActivator;
+import ru.javaops.masterjava.service.mail.GroupResult;
 import ru.javaops.masterjava.service.mail.MailRemoteService;
 import ru.javaops.masterjava.service.mail.MailServiceExecutor;
+import ru.javaops.masterjava.service.mail.util.MailUtils;
 
 import javax.servlet.ServletContextEvent;
 import javax.servlet.ServletContextListener;
@@ -21,10 +24,26 @@
         akkaActivator.startTypedActor(MailRemoteService.class, "mail-remote-service",
                 (Creator<MailRemoteService>) () ->
                         mailObject -> MailServiceExecutor.sendAsyncWithReply(mailObject, akkaActivator.getExecutionContext()));
+        akkaActivator.startActor(MailActor.class, "mail-actor");
     }
 
     @Override
     public void contextDestroyed(ServletContextEvent sce) {
         akkaActivator.shutdown();
     }
+
+    public static class MailActor extends AbstractActor {
+        @Override
+        public Receive createReceive() {
+            return receiveBuilder().match(MailUtils.MailObject.class,
+                    mailObject -> {
+                        log.info("Receive mail form webappActor");
+                        GroupResult groupResult = MailServiceExecutor.sendBulk(mailObject);
+                        log.info("Send result to webappActor");
+                        sender().tell(groupResult, self());
+                    })
+                    .build();
+        }
+    }
+
 }
\ No newline at end of file
Index: services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailServiceExecutor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailServiceExecutor.java	(date 1514248684000)
+++ services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailServiceExecutor.java	(date 1514249109294)
@@ -23,6 +23,11 @@
 
     private static final ExecutorService mailExecutor = Executors.newFixedThreadPool(8);
 
+    public static GroupResult sendBulk(final MailObject mailObject) throws WebStateException {
+        return sendBulk(MailUtils.split(mailObject.getUsers()),
+                mailObject.getSubject(), mailObject.getBody(), MailUtils.getAttachments(mailObject.getAttachments()));
+    }
+
     public static GroupResult sendBulk(final Set<Addressee> addressees, final String subject, final String body, List<Attachment> attachments) throws WebStateException {
         final CompletionService<MailResult> completionService = new ExecutorCompletionService<>(mailExecutor);
 
@@ -76,9 +81,7 @@
 
     public static scala.concurrent.Future<GroupResult> sendAsyncWithReply(MailObject mailObject, ExecutionContext ec) {
         // http://doc.akka.io/docs/akka/current/java/futures.html
-        return Futures.future(
-                () -> sendBulk(MailUtils.split(mailObject.getUsers()), mailObject.getSubject(), mailObject.getBody(), MailUtils.getAttachments(mailObject.getAttachments())),
-                ec);
+        return Futures.future(() -> sendBulk(mailObject), ec);
     }
 
     public static void sendAsync(MailObject mailObject) {
Index: web/webapp/src/main/webapp/WEB-INF/templates/users.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/webapp/src/main/webapp/WEB-INF/templates/users.html	(date 1514248684000)
+++ web/webapp/src/main/webapp/WEB-INF/templates/users.html	(date 1514249516872)
@@ -47,6 +47,7 @@
         <input type="radio" name="transport" onchange="setUrl('/mail/rest/send');">REST<br>
         <input type="radio" name="transport" onchange="setUrl('sendJms');">JMS<br>
         <input type="radio" name="transport" onchange="setUrl('sendAkkaTyped');">AKKA Typed<br>
+        <input type="radio" name="transport" onchange="setUrl('sendAkkaUntyped')">AKKA Untyped<br>
     </p>
     <p>
         <button type="button" onclick="send()">Send</button>
