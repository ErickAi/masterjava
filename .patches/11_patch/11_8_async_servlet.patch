Index: services/akka-remote/src/main/java/ru/javaops/masterjava/akka/AkkaActivator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/akka-remote/src/main/java/ru/javaops/masterjava/akka/AkkaActivator.java	(date 1514250779000)
+++ services/akka-remote/src/main/java/ru/javaops/masterjava/akka/AkkaActivator.java	(date 1514250792369)
@@ -36,6 +36,11 @@
         return system.actorOf(Props.create(actorClass), name);
     }
 
+    public <T> ActorRef startActor(Props props) {
+        log.info("Start new AKKA actor");
+        return system.actorOf(props);
+    }
+
     public <T> T getTypedRef(Class<T> typedClass, String path) {
         log.info("Get typed reference with path={}", path);
         return TypedActor.get(system).typedActorOf(new TypedProps<T>(typedClass), system.actorFor(path));
Index: services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailSender.java	(date 1514250779000)
+++ services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailSender.java	(date 1514250792472)
@@ -26,7 +26,7 @@
     }
 
     static String sendToGroup(Set<Addressee> to, Set<Addressee> cc, String subject, String body, List<Attachment> attachments) throws WebStateException {
-        log.info("Send mail to \'" + to + "\' cc \'" + cc + "\' subject \'" + subject + (log.isDebugEnabled() ? "\nbody=" + body : ""));
+        log.info("Send mail to \'" + to + "\' cc \'" + cc + "\' subject \'" + subject + '\'' + (log.isDebugEnabled() ? "\nbody=" + body : ""));
         String state = MailResult.OK;
         try {
             val email = MailConfig.createHtmlEmail();
Index: web/webapp/src/main/java/ru/javaops/masterjava/webapp/akka/AkkaTypedSendServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/webapp/src/main/java/ru/javaops/masterjava/webapp/akka/AkkaTypedSendServlet.java	(date 1514250779000)
+++ web/webapp/src/main/java/ru/javaops/masterjava/webapp/akka/AkkaTypedSendServlet.java	(date 1514250792552)
@@ -4,9 +4,11 @@
 import ru.javaops.masterjava.service.mail.GroupResult;
 import ru.javaops.masterjava.service.mail.MailRemoteService;
 import ru.javaops.masterjava.service.mail.util.MailUtils.MailObject;
+import ru.javaops.masterjava.util.Exceptions;
 import scala.concurrent.Await;
 import scala.concurrent.duration.Duration;
 
+import javax.servlet.AsyncContext;
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletException;
 import javax.servlet.annotation.MultipartConfig;
@@ -16,8 +18,7 @@
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 
-import static ru.javaops.masterjava.webapp.WebUtil.createMailObject;
-import static ru.javaops.masterjava.webapp.WebUtil.doAndWriteResponse;
+import static ru.javaops.masterjava.webapp.WebUtil.*;
 import static ru.javaops.masterjava.webapp.akka.AkkaWebappListener.akkaActivator;
 
 @WebServlet(value = "/sendAkkaTyped", loadOnStartup = 1, asyncSupported = true)
@@ -36,13 +37,20 @@
     @Override
     protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
         req.setCharacterEncoding("UTF-8");
-        doAndWriteResponse(resp, () -> sendAkka(createMailObject(req)));
-    }
+        // https://dzone.com/articles/limited-usefulness
+        doAsync(resp, () -> {
+            MailObject mailObject = createMailObject(req);
 
-    private String sendAkka(MailObject mailObject) throws Exception {
-        scala.concurrent.Future<GroupResult> future = mailService.sendBulk(mailObject);
-        log.info("Receive future, waiting result ...");
-        GroupResult groupResult = Await.result(future, Duration.create(10, "seconds"));
-        return groupResult.toString();
+            final AsyncContext ac = req.startAsync();
+            ac.start(Exceptions.<IOException>wrap(() -> {
+                doAndWriteResponse((HttpServletResponse) ac.getResponse(), () -> {
+                    scala.concurrent.Future<GroupResult> future = mailService.sendBulk(mailObject);
+                    log.info("Receive future, await result ...");
+                    GroupResult groupResult = Await.result(future, Duration.create(10, "seconds"));
+                    return groupResult.toString();
+                });
+                ac.complete();
+            }));
+        });
     }
 }
\ No newline at end of file
Index: web/webapp/src/main/java/ru/javaops/masterjava/webapp/akka/AkkaUntypedSendServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/webapp/src/main/java/ru/javaops/masterjava/webapp/akka/AkkaUntypedSendServlet.java	(date 1514250779000)
+++ web/webapp/src/main/java/ru/javaops/masterjava/webapp/akka/AkkaUntypedSendServlet.java	(date 1514251266080)
@@ -2,10 +2,12 @@
 
 import akka.actor.AbstractActor;
 import akka.actor.ActorRef;
+import akka.actor.Props;
 import lombok.extern.slf4j.Slf4j;
 import ru.javaops.masterjava.service.mail.GroupResult;
 import ru.javaops.masterjava.service.mail.util.MailUtils.MailObject;
 
+import javax.servlet.AsyncContext;
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletException;
 import javax.servlet.annotation.MultipartConfig;
@@ -14,41 +16,72 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.TimeUnit;
 
 import static ru.javaops.masterjava.webapp.WebUtil.createMailObject;
-import static ru.javaops.masterjava.webapp.WebUtil.doAndWriteResponse;
+import static ru.javaops.masterjava.webapp.WebUtil.doAsync;
 import static ru.javaops.masterjava.webapp.akka.AkkaWebappListener.akkaActivator;
 
-@WebServlet(value = "/sendAkkaUntyped", loadOnStartup = 1)
+@WebServlet(value = "/sendAkkaUntyped", loadOnStartup = 1, asyncSupported = true)
 @Slf4j
 @MultipartConfig
 public class AkkaUntypedSendServlet extends HttpServlet {
-    private ActorRef webappActor;
     private ActorRef mailActor;
+    private ExecutorService executorService;
 
     @Override
     public void init(ServletConfig config) throws ServletException {
         super.init(config);
-        webappActor = akkaActivator.startActor(WebappActor.class, "mail-client");
         mailActor = akkaActivator.getActorRef("akka.tcp://MailService@127.0.0.1:2553/user/mail-actor");
+        executorService = Executors.newFixedThreadPool(8);
+    }
+
+    @Override
+    public void destroy() {
+        super.destroy();
+        if (executorService != null) {
+            log.info("shutdown");
+            executorService.shutdown();
+            try {
+                if (!executorService.awaitTermination(3, TimeUnit.SECONDS)) {
+                    log.info("shutdownNow");
+                    executorService.shutdownNow();
+                }
+            } catch (InterruptedException e) { //nothing
+            }
+        }
     }
 
     @Override
     protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
         req.setCharacterEncoding("UTF-8");
-        doAndWriteResponse(resp, () -> sendAkka(createMailObject(req)));
-    }
-
-    private String sendAkka(MailObject mailObject) {
-        mailActor.tell(mailObject, webappActor);
-        return "Successfully sent AKKA message";
+        doAsync(resp, () -> {
+            MailObject mailObject = createMailObject(req);
+            final AsyncContext ac = req.startAsync();
+            executorService.submit(() -> {
+                ActorRef webappActor = akkaActivator.startActor(Props.create(WebappActor.class, ac));
+                mailActor.tell(mailObject, webappActor);
+            });
+        });
     }
 
     public static class WebappActor extends AbstractActor {
+        private final AsyncContext asyncCtx;
+
+        public WebappActor(AsyncContext ac) {
+            this.asyncCtx = ac;
+        }
+
         @Override
         public Receive createReceive() {
             return receiveBuilder().match(GroupResult.class,
-                    groupResult -> log.info(groupResult.toString()))
+                    groupResult -> {
+                        log.info("Receive result form mailActor");
+                        asyncCtx.getResponse().getWriter().write(groupResult.toString());
+                        asyncCtx.complete();
+                    })
                     .build();
         }
     }
Index: web/webapp/src/main/java/ru/javaops/masterjava/webapp/WebUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/webapp/src/main/java/ru/javaops/masterjava/webapp/WebUtil.java	(date 1514250779000)
+++ web/webapp/src/main/java/ru/javaops/masterjava/webapp/WebUtil.java	(date 1514250792640)
@@ -19,6 +19,20 @@
 @Slf4j
 public class WebUtil {
 
+    public static void doAsync(HttpServletResponse resp, Functions.RunnableEx doer) throws IOException {
+        resp.setCharacterEncoding("UTF-8");
+        try {
+            log.info("Start asynchronous processing");
+            doer.run();
+            log.info("Asynchronous processing running ...");
+        } catch (Exception e) {
+            log.error("Asynchronous processing failed", e);
+            String message = e.getMessage();
+            String result = (message != null) ? message : e.getClass().getName();
+            resp.getWriter().write(result);
+        }
+    }
+
     public static void doAndWriteResponse(HttpServletResponse resp, Functions.SupplierEx<String> doer) throws IOException {
         log.info("Start sending");
         resp.setCharacterEncoding("UTF-8");
